---
http_interactions:
- request:
    method: get
    uri: https://api.github.com/repos/versioneye/naturalsorter/commits/3cc7ef47557d7d790c7e55e667d451f56d276c13?client_id=23baa3ad794ac9a9214b&client_secret=bf2bc9df8933e9a1784bbcec2b46527b6e8098dd
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/vnd.github.beta+json
      User-Agent:
      - Octokit Ruby Gem 2.6.2
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - GitHub.com
      Date:
      - Thu, 05 Dec 2013 14:56:02 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Status:
      - 200 OK
      X-Ratelimit-Limit:
      - '5000'
      X-Ratelimit-Remaining:
      - '4983'
      X-Ratelimit-Reset:
      - '1386258265'
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Last-Modified:
      - Mon, 17 Jun 2013 10:00:51 GMT
      Etag:
      - "\"3480431effc102caeab1719fcb59c1a8\""
      Vary:
      - Accept
      - Accept-Encoding
      X-Github-Media-Type:
      - github.beta; format=json
      X-Content-Type-Options:
      - nosniff
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Expose-Headers:
      - ETag, Link, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval
      Access-Control-Allow-Origin:
      - "*"
      X-Github-Request-Id:
      - D95B947E:2CE5:12A6473:52A09401
    body:
      encoding: UTF-8
      string: "{\"sha\":\"3cc7ef47557d7d790c7e55e667d451f56d276c13\",\"commit\":{\"author\":{\"name\":\"reiz\",\"email\":\"robert.reiz.81@gmail.com\",\"date\":\"2013-06-17T10:00:51Z\"},\"committer\":{\"name\":\"reiz\",\"email\":\"robert.reiz.81@gmail.com\",\"date\":\"2013-06-17T10:00:51Z\"},\"message\":\"remove
        white spaces\",\"tree\":{\"sha\":\"6fe25fef0066a4e43aebf9bb93cef5bd320bd6a3\",\"url\":\"https://api.github.com/repos/versioneye/naturalsorter/git/trees/6fe25fef0066a4e43aebf9bb93cef5bd320bd6a3\"},\"url\":\"https://api.github.com/repos/versioneye/naturalsorter/git/commits/3cc7ef47557d7d790c7e55e667d451f56d276c13\",\"comment_count\":0},\"url\":\"https://api.github.com/repos/versioneye/naturalsorter/commits/3cc7ef47557d7d790c7e55e667d451f56d276c13\",\"html_url\":\"https://github.com/versioneye/naturalsorter/commit/3cc7ef47557d7d790c7e55e667d451f56d276c13\",\"comments_url\":\"https://api.github.com/repos/versioneye/naturalsorter/commits/3cc7ef47557d7d790c7e55e667d451f56d276c13/comments\",\"author\":{\"login\":\"reiz\",\"id\":652130,\"avatar_url\":\"https://0.gravatar.com/avatar/11c3ac04d669661020cf80a822cd9620?d=https%3A%2F%2Fidenticons.github.com%2F001946c78373a160c3c4ba0ce91f8161.png&r=x\",\"gravatar_id\":\"11c3ac04d669661020cf80a822cd9620\",\"url\":\"https://api.github.com/users/reiz\",\"html_url\":\"https://github.com/reiz\",\"followers_url\":\"https://api.github.com/users/reiz/followers\",\"following_url\":\"https://api.github.com/users/reiz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/reiz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/reiz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/reiz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/reiz/orgs\",\"repos_url\":\"https://api.github.com/users/reiz/repos\",\"events_url\":\"https://api.github.com/users/reiz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/reiz/received_events\",\"type\":\"User\",\"site_admin\":false},\"committer\":{\"login\":\"reiz\",\"id\":652130,\"avatar_url\":\"https://0.gravatar.com/avatar/11c3ac04d669661020cf80a822cd9620?d=https%3A%2F%2Fidenticons.github.com%2F001946c78373a160c3c4ba0ce91f8161.png&r=x\",\"gravatar_id\":\"11c3ac04d669661020cf80a822cd9620\",\"url\":\"https://api.github.com/users/reiz\",\"html_url\":\"https://github.com/reiz\",\"followers_url\":\"https://api.github.com/users/reiz/followers\",\"following_url\":\"https://api.github.com/users/reiz/following{/other_user}\",\"gists_url\":\"https://api.github.com/users/reiz/gists{/gist_id}\",\"starred_url\":\"https://api.github.com/users/reiz/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://api.github.com/users/reiz/subscriptions\",\"organizations_url\":\"https://api.github.com/users/reiz/orgs\",\"repos_url\":\"https://api.github.com/users/reiz/repos\",\"events_url\":\"https://api.github.com/users/reiz/events{/privacy}\",\"received_events_url\":\"https://api.github.com/users/reiz/received_events\",\"type\":\"User\",\"site_admin\":false},\"parents\":[{\"sha\":\"75245c523dc78614f5578e878245467ab4a9c6f4\",\"url\":\"https://api.github.com/repos/versioneye/naturalsorter/commits/75245c523dc78614f5578e878245467ab4a9c6f4\",\"html_url\":\"https://github.com/versioneye/naturalsorter/commit/75245c523dc78614f5578e878245467ab4a9c6f4\"}],\"stats\":{\"total\":72,\"additions\":36,\"deletions\":36},\"files\":[{\"sha\":\"dcc5239c9ed9f715eab46e9645a3c2f7a335d2d0\",\"filename\":\"lib/natcmp.rb\",\"status\":\"modified\",\"additions\":2,\"deletions\":2,\"changes\":4,\"blob_url\":\"https://github.com/versioneye/naturalsorter/blob/3cc7ef47557d7d790c7e55e667d451f56d276c13/lib/natcmp.rb\",\"raw_url\":\"https://github.com/versioneye/naturalsorter/raw/3cc7ef47557d7d790c7e55e667d451f56d276c13/lib/natcmp.rb\",\"contents_url\":\"https://api.github.com/repos/versioneye/naturalsorter/contents/lib/natcmp.rb?ref=3cc7ef47557d7d790c7e55e667d451f56d276c13\",\"patch\":\"@@
        -61,10 +61,10 @@ def self.natcmp(str1, str2, caseInsensitive=false)\\n \\n
        \        case (num1 <=> num2)\\n           when -1 then return -1\\n-          when
        1 then return 1\\n+          when  1 then return  1\\n         end\\n       when
        -1 then return -1\\n-      when 1 then return 1\\n+      when  1 then return
        \ 1\\n     end # case\\n \\n   end # while\"},{\"sha\":\"1c15b689b0d80e09ec9e07357a5787f6e4dc3402\",\"filename\":\"lib/versioncmp.rb\",\"status\":\"modified\",\"additions\":34,\"deletions\":34,\"changes\":68,\"blob_url\":\"https://github.com/versioneye/naturalsorter/blob/3cc7ef47557d7d790c7e55e667d451f56d276c13/lib/versioncmp.rb\",\"raw_url\":\"https://github.com/versioneye/naturalsorter/raw/3cc7ef47557d7d790c7e55e667d451f56d276c13/lib/versioncmp.rb\",\"contents_url\":\"https://api.github.com/repos/versioneye/naturalsorter/contents/lib/versioncmp.rb?ref=3cc7ef47557d7d790c7e55e667d451f56d276c13\",\"patch\":\"@@
        -29,11 +29,11 @@ class Versioncmp\\n   #\\n   def self.compare(a_val, b_val)\\n
        \\n-    a_empty = a_val.nil? || a_val.empty? \\n-    b_empty = b_val.nil?
        || b_val.empty? \\n+    a_empty = a_val.nil? || a_val.empty?\\n+    b_empty
        = b_val.nil? || b_val.empty?\\n \\n-    return 0 if a_empty && b_empty\\n-
        \   return 1 if (a_empty == false) && b_empty\\n+    return  0 if  a_empty
        && b_empty\\n+    return  1 if (a_empty == false) && b_empty\\n     return
        -1 if (b_empty == false) && a_empty\\n \\n     a = pre_process a_val\\n@@
        -43,14 +43,14 @@ def self.compare(a_val, b_val)\\n     offset2 = 0;\\n \\n
        \    for i in 0..100\\n-      break if offset1 >= a.length() || offset2 >=
        b.length() \\n+      break if offset1 >= a.length() || offset2 >= b.length()\\n
        \\n       part1 = Versioncmp.get_a_piece_of_the_cake(offset1, a);\\n       part2
        = Versioncmp.get_a_piece_of_the_cake(offset2, b);\\n-      \\n+\\n       return
        -1 if Versioncmp.timestamp?(part1) && part2.length() < 8\\n       return  1
        if Versioncmp.timestamp?(part2) && part1.length() < 8\\n-      \\n+\\n       offset1
        += part1.length() + 1;\\n       offset2 += part2.length() + 1;\\n \\n@@ -59,10
        +59,10 @@ def self.compare(a_val, b_val)\\n         bi = part2.to_i;\\n         result
        = Versioncmp.compare_int(ai, bi);\\n         return result if result != 0\\n-
        \       next \\n+        next\\n       elsif ( !part1.match(/^[0-9]+$/) &&
        !part2.match(/^[0-9]+$/) )\\n         result = double_scope_checker(a, b)\\n-
        \       return result if result != 0      \\n+        return result if result
        != 0\\n         result = Versioncmp.compare_string(part1, part2)\\n         return
        result if (result != 0)\\n         next\\n@@ -73,12 +73,12 @@ def self.compare(a_val,
        b_val)\\n         return -1;\\n       end\\n     end\\n-    result = Versioncmp.check_for_tags(a,
        b) \\n+    result = Versioncmp.check_for_tags(a, b)\\n     return result\\n
        \  end\\n-  \\n+\\n   # Tags are RC, alpha, beta, dev and so on.\\n-  # \\n+
        \ #\\n   def self.check_for_tags(a, b)\\n     big = String.new(a)\\n     small
        = String.new(b)\\n@@ -92,24 +92,24 @@ def self.check_for_tags(a, b)\\n         return
        Versioncmp.compare_string_length(a, b)\\n       end\\n     end\\n-    self.compare_string_length_odd(a,
        b)  \\n+    self.compare_string_length_odd(a, b)\\n   end\\n \\n   def self.double_scope_checker(a,
        b)\\n     if VersionTagRecognizer.tagged?(a) && VersionTagRecognizer.tagged?(b)\\n-
        \     a_without_scope   = VersionTagRecognizer.remove_tag a\\n+      a_without_scope
        = VersionTagRecognizer.remove_tag a\\n       b_without_scope = VersionTagRecognizer.remove_tag
        b\\n       if a_without_scope.eql? b_without_scope\\n         return VersionTagRecognizer.compare_tags(a,
        b)\\n       end\\n     end\\n-    0 \\n+    0\\n   end\\n-  \\n+\\n   def
        self.get_a_piece_of_the_cake(offset, cake)\\n     for z in 0..100\\n       offsetz
        = offset + z\\n-      break if offsetz > cake.length() \\n+      break if
        offsetz > cake.length()\\n       p = cake[ offset..offset + z ]\\n       if
        ( p.match(/^\\\\w+\\\\.$/) != nil )\\n         break\\n@@ -121,21 +121,21
        @@ def self.get_a_piece_of_the_cake(offset, cake)\\n     piece = cake[offset..offset
        + z ]\\n     return piece\\n   end\\n-  \\n+\\n   def self.timestamp?(part)\\n
        \    return part.length() == 8 && part.match(/^[0-9]+$/) != nil\\n   end\\n
        \\n-  def self.pre_process val \\n+  def self.pre_process val\\n     a = replace_x_dev
        val\\n-    replace_leading_v a \\n+    replace_leading_v a\\n     replace_99_does_not_exist
        a\\n-    replace_timestamps a \\n-    VersionTagRecognizer.remove_minimum_stability
        a \\n-    a \\n+    replace_timestamps a\\n+    VersionTagRecognizer.remove_minimum_stability
        a\\n+    a\\n   end\\n \\n-  def self.replace_99_does_not_exist val \\n+  def
        self.replace_99_does_not_exist val\\n     if val.eql?(\\\"99.0-does-not-exist\\\")\\n
        \      val.gsub!(\\\"99.0-does-not-exist\\\", \\\"0.0.0\\\")\\n     end\\n@@
        -148,12 +148,12 @@ def self.replace_99_does_not_exist val\\n   def self.replace_timestamps
        val\\n     if val.match(/^[0-9]{8}$/)\\n       val.gsub!(/^[0-9]{8}$/, \\\"0.0.0\\\")\\n-
        \   elsif val.match(/^[0-9]{8}.[0-9]{6}$/) \\n+    elsif val.match(/^[0-9]{8}.[0-9]{6}$/)\\n
        \      val.gsub!(/^[0-9]{8}.[0-9]{6}$/, \\\"0.0.0\\\")\\n     end\\n   end\\n
        \\n-  def self.replace_x_dev val \\n+  def self.replace_x_dev val\\n     new_val
        = String.new(val)\\n     if val.eql?(\\\"dev-master\\\")\\n       new_val
        = \\\"9999999\\\"\\n@@ -165,17 +165,17 @@ def self.replace_x_dev val\\n     new_val\\n
        \  end\\n \\n-  def self.replace_leading_v val \\n+  def self.replace_leading_v
        val\\n     val.gsub!(/^v/, \\\"\\\") if val.match(/^v[0-9]+/)\\n   end\\n
        \\n-  def self.replace_leading_vs a, b \\n-    self.replace_leading_v a \\n+
        \ def self.replace_leading_vs a, b\\n+    self.replace_leading_v a\\n     self.replace_leading_v
        b\\n   end\\n \\n   def self.check_jquery_versioning(part1, part2)\\n-    #
        --- START ---- special case for awesome jquery shitty verison numbers \\n+
        \   # --- START ---- special case for awesome jquery shitty verison numbers\\n
        \    if ( part1.match(/^[0-9]+[a-zA-Z]+[0-9]+$/) != nil && part2.match(/^[0-9]+$/)
        != nil )\\n       part1_1 = part1.match(/^[0-9]+/)\\n       result = Versioncmp.compare_int(part1_1[0],
        part2)\\n@@ -195,7 +195,7 @@ def self.check_jquery_versioning(part1, part2)\\n
        \    end\\n \\n     return nil\\n-    # --- END ---- special case for awesome
        jquery shitty verison numbers \\n+    # --- END ---- special case for awesome
        jquery shitty verison numbers\\n   end\\n \\n   def self.compare_int(ai, bi)\\n@@
        -203,20 +203,20 @@ def self.compare_int(ai, bi)\\n     return  0 if (ai ==
        bi)\\n     return  1\\n   end\\n-  \\n+\\n   def self.compare_string(a, b)\\n
        \    return  0 if a.eql? b\\n     return -1 if a < b\\n     return  1\\n   end\\n
        \\n-  def self.compare_string_length(a, b)  \\n+  def self.compare_string_length(a,
        b)\\n     return  0 if a.length() == b.length()\\n     return  1 if a.length()
        <  b.length()\\n     return -1\\n   end\\n \\n-  def self.compare_string_length_odd(a,
        b)  \\n+  def self.compare_string_length_odd(a, b)\\n     return  1 if a.length
        > b.length\\n     return -1 if a.length < b.length\\n     return  0\"}]}"
    http_version: 
  recorded_at: Thu, 05 Dec 2013 14:56:02 GMT
recorded_with: VCR 2.8.0
