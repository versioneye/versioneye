define(["underscore","backbone"],function(e,t){e.templateSettings={interpolate:/\{\{\=(.+?)\}\}/g,evaluate:/\{\{(.+?)\}\}/g};var i=function(t,i){var n=e.template($("#github-notification-template").html());$(".flash-container").html(n({classes:t,content:i})).fadeIn(400).delay(6e3).fadeOut(800)},n=t.View.extend({template:e.template($("#github-repo-switch-template").html()),events:{"click .github-switch":"onSwitchChange"},initialize:function(e){this.parent=e.parent,this.branch=e.branch,this.project_file=e.project_file},renderInfo:function(t){not_imported_tmpl=e.template("<strong> {{= filename }} </strong>"),imported_tmpl=e.template(['<a href="{{= url}}"> <strong>{{= filename }}</strong> </a>',", imported {{= moment(imported).fromNow() }}"].join(" "));var i="",n=this.project_file.path;return i=e.isNull(t)||e.isUndefined(t)?not_imported_tmpl({filename:n}):imported_tmpl({branch:this.branch,filename:n,url:t.project_url,imported:t.created_at})},getImportedFileInfo:function(t){var i=this.model.get("imported_files"),n=null,a=!1;return with_same_name=e.where(i,{branch:this.branch,filename:t}),e.isEmpty(with_same_name)||(a=!0,n=e.first(with_same_name)),{is_imported:a,info:n}},render:function(){var e=this.project_file.path,t=this.getImportedFileInfo(e),i=this.renderInfo(t.info);return this.$el.html(this.template({repo:this.model.toJSON(),branch:this.branch,filename:e,switch_id:this.getModelSwitchId(),switch_info:i,is_imported:t.is_imported,project_info:t.is_imported?t.info:{project_id:null}})),this},getModelSwitchId:function(){var t="github-repo-switch-"+this.project_file.uuid;return e.uniqueId(t)},onSwitchChange:function(t){{var i=$(t.currentTarget);i.data()}if(i.attr("disabled"))return console.log("Going to drop event of unactive switch."),t.preventDefault(),t.stopImmediatePropagation(),t.stopPropagation(),!1;var n=i.attr("checked");i.attr("checked",!n),this.disableSwitch(i);var a=e.template($("#github-notification-template").html()),r=a({classes:"alert alert-info",content:['<img src="/assets/loadingbar2.gif" style="height: 20px;" alt="loading" >',"<strong>Please wait!</strong> We are still importing data from SCM.","It may take up-to 4seconds. But we are almost there."].join(" ")});return i.attr("checked")?(this.showRepoNotification(r),this.addProject(i)):this.removeProject(i),!0},disableSwitch:function(e){e.attr("disabled",!0),e.parents(".onoffswitch").addClass("disabled")},enableSwitch:function(e){e.attr("disabled",!1),e.parents(".onoffswitch").removeClass("disabled")},switchOnActivate:function(){var e=this.$el.find("input");e.attr("checked",!0),this.enableSwitch(e)},switchOffActivate:function(){var e=this.$el.find("input");e.attr("checked",!1),this.enableSwitch(e)},addProject:function(e){console.log("Adding new project");var t=this;this.model.save({command:"import",command_data:e.data()},{beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",$('meta[name="csrf-token"]').attr("content"))},success:function(e){var i=t;i.onAddSuccess(e)},error:function(e,i){console.debug(i);var n=t;n.onAddFailure(e,i)}})},onAddSuccess:function(e){var t=e.get("command_result"),n=["<strong> Success! </strong>","Project file ",t.filename," on branch ",t.branch," of SCM project ",e.get("fullname")," is now successfully imported.","You can now checkout project's page."].join(" "),a=this.$el.find("input");return a.data("githubProjectId",t.project_id),this.updateRepoTitle(t),this.updateRepoProjectInfo(e),this.switchOnActivate(),this.hideRepoNotification(),i("alert alert-success",n),!0},onAddFailure:function(e,t){var n="";404==t.status?n="Server timeout. We are facing to many requests. Please Try again later.":500==t.status?n="An error occurred. Please try again later and contact us on Twitter @VersionEye.":(n="Can't import project: "+e.get("fullname")+".",n+=t.responseText),console.debug("We encountered: "+t.status+" "+t.statusText),console.debug(n),i("alert alert-error",n),this.hideRepoNotification();var a=this.$el.find("input");return this.switchOffActivate(a),$(this.el).find(".repo-notification").html(""),!1},removeProject:function(e){console.log("Removing selected project.");var t=this;return this.model.save({command:"remove",command_data:e.data()},{beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",$('meta[name="csrf-token"]').attr("content"))},success:function(e){var i=t;i.onRemoveSuccess(e)},error:function(e){var i=t;i.onRemoveFailure(e)}}),!1},onRemoveSuccess:function(e){var t=("#github-repo-"+e.get("github_id"),e.get("command_result")),n=["<strong>Success!</strong>","The Project's file ",t.filename," from the SCM repository ",e.get("fullname")," is now successfully removed."].join(" ");return this.updateRepoTitle(),this.updateRepoProjectInfo(e),this.switchOffActivate(),i("alert alert-success",n),this.hideRepoNotification(),!0},onRemoveFailure:function(){var e="Fail: Can not remove project";return this.switchOnActivate(),i("alert alert-warning",e),this.hideRepoNotification(),!1},updateRepoTitle:function(e){var t=this.renderInfo(e);this.$el.find(".item-title").html(t)},updateRepoProjectInfo:function(){var t=e.template($("#github-repo-project-info-template").html()),i=this.model.get("imported_files")||[],n=e.map(i,function(e){var t=e.branch+"/"+e.filename;return['<a href="',e.project_url,'" > ',t," </a>"].join("")}),a=t({branches:this.model.get("branches"),imported_urls:n});this.$el.parents(".repo-container").find(".repo-project-info").html(a)},showRepoNotification:function(e){notifier=$(this.el).parents(".repo-container").find(".repo-notification"),notifier.removeClass("hide"),notifier.html(e)},hideRepoNotification:function(){this.$el.parents(".repo-container").find(".repo-notification").html("").addClass("hide")}});return n});